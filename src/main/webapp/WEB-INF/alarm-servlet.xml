<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:context="http://www.springframework.org/schema/context"  
    xmlns:mvc="http://www.springframework.org/schema/mvc" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
    xmlns:tx="http://www.springframework.org/schema/tx" 
    xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="  
        http://www.springframework.org/schema/beans       
        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd  
        http://www.springframework.org/schema/context   
        http://www.springframework.org/schema/context/spring-context-3.1.xsd  
        http://www.springframework.org/schema/mvc  
        http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
        http://www.springframework.org/schema/tx 
        http://www.springframework.org/schema/tx/spring-tx.xsd 
        http://www.springframework.org/schema/aop 
        http://www.springframework.org/schema/aop/spring-aop.xsd">  
  
  	<!-- 开启自动扫包 -->
    <context:component-scan base-package="com.alarm.api,com.alarm.cms,com.alarm.dao,com.alarm.service,com.alarm.filter" />
    
    <!-- 文件上传 -->
    <!-- <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver" /> -->
    
    <!-- 引入外部数据源配置信息 -->
    <context:property-placeholder location="classpath:jdbc.properties" />
    
    <mvc:annotation-driven ignoreDefaultModelOnRedirect="true" />
    
    <!-- 配置视图解析 -->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">  
        <property name="prefix" value="/WEB-INF/views/" />  
        <property name="suffix" value=".jsp" />  
    </bean>
    
    <mvc:resources mapping="/assets/css/**" location="/WEB-INF/assets/css/" />
    <mvc:resources mapping="/assets/fonts/**" location="/WEB-INF/assets/fonts/" />
    <mvc:resources mapping="/assets/images/**" location="/WEB-INF/assets/images/" />
    <mvc:resources mapping="/assets/img/**" location="/WEB-INF/assets/img/" />
    <mvc:resources mapping="/assets/js/**" location="/WEB-INF/assets/js/" />

    <!-- 配置数据源 -->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">  
	    <property name="driverClassName" value="${jdbc.driver}" />  
	    <property name="url" value="${jdbc.url}" />
	    <property name="username" value="${jdbc.username}" />
	    <property name="password" value="${jdbc.password}" />
	</bean>
	
	<!-- 配置Hibernate的SessionFactory -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <!-- 注入连接池 -->
        <property name="dataSource" ref="dataSource"/>
        <!-- 配置Hibernate属性 -->
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.show_sql">true</prop><!-- 是否展示SQL -->
                <prop key="hibernate.hbm2ddl.auto">update</prop><!-- 是否自动创建表结构 -->
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5InnoDBDialect</prop>
            </props>
        </property>
        <!-- 扫描并加载注解过的实体类 -->
        <property name="packagesToScan" value="com.alarm.*"/>
        <property name="mappingLocations" value="classpath:com/alarm/mapping/*.hbm.xml"></property>
    </bean>
     
    <!-- 配置事务管理器 -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <!-- 注入SessionFactory -->
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
     
    <!-- 配置事务增强 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!-- 配置需要进行事务管理的方法，和事务传播行为 -->
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="delete*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>
     
    <!-- 配置切面 -->
    <!-- <aop:config>
        配置切入点
            * org.ssh.service.*+.*(..)
                *：表示方法的作用域，*表示所有
                org.ssh.service.*：表示org.ssh.service下的任何包
                org.ssh.service.*+：表示org.ssh.service下的任何包及其子包
                *(..)：*表示任何方法，(..)表示方法的任何参数
        
        <aop:pointcut id="pointcut" expression="execution(* org.ssh.*.service.*+.*(..))"/>
        适配切入点和事务增强
        <aop:advisor advice-ref="txAdvice" pointcut-ref="pointcut"/>
    </aop:config> -->
	
	<!-- 配置Session工厂 -->
	<!-- <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
	    <property name="configLocation" value="classpath:mybatis-config.xml" />
	    <property name="dataSource" ref="dataSource" />  
	</bean>  --> 
	
	<!-- 配置事务管理器 -->
	<!-- <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
	    <property name="dataSource" ref="dataSource" />  
	</bean>  
	    
	<bean id="weatherMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">  
	    <property name="mapperInterface" value="com.joyhong.dao.WeatherMapper" />  
	    <property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>
	
	<bean id="deviceMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">  
	    <property name="mapperInterface" value="com.joyhong.dao.DeviceMapper" />  
	    <property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>
	
	<bean id="userMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">  
	    <property name="mapperInterface" value="com.joyhong.dao.UserMapper" />  
	    <property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>
	
	<bean id="orderMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">  
	    <property name="mapperInterface" value="com.joyhong.dao.OrderMapper" />  
	    <property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>
	
	<bean id="uploadMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">  
	    <property name="mapperInterface" value="com.joyhong.dao.UploadMapper" />  
	    <property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>
	
	<bean id="notificationMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">  
	    <property name="mapperInterface" value="com.joyhong.dao.NotificationMapper" />  
	    <property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>
	
	<bean id="configMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">  
	    <property name="mapperInterface" value="com.joyhong.dao.ConfigMapper" />  
	    <property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>
	
	<bean id="versionMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">  
	    <property name="mapperInterface" value="com.joyhong.dao.VersionMapper" />  
	    <property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>
	
	<bean id="userDeviceMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">  
	    <property name="mapperInterface" value="com.joyhong.dao.UserDeviceMapper" />  
	    <property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean> -->
</beans>